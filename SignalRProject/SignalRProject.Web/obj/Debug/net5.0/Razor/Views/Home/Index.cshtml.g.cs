#pragma checksum "C:\Users\EKIZ\source\repos\SignalRProject\SignalRProject.Web\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "91048b074d353145d68fbac96f20396106ef3cce"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\EKIZ\source\repos\SignalRProject\SignalRProject.Web\Views\_ViewImports.cshtml"
using SignalRProject.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\EKIZ\source\repos\SignalRProject\SignalRProject.Web\Views\_ViewImports.cshtml"
using SignalRProject.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"91048b074d353145d68fbac96f20396106ef3cce", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"43f26415e37d2ddea2ed9f256da7961f19a1446d", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\EKIZ\source\repos\SignalRProject\SignalRProject.Web\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "91048b074d353145d68fbac96f20396106ef3cce3818", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"">
        $(document).ready(() => {
            var connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withAutomaticReconnect(1000, 3000, 3000, 2000).withUrl(""https://localhost:5001/MyHub"").build();
            statusShow();
            start();
            function statusShow() {
                $(""#conStatus"").text(connection.connectionState);
            }

            function start() {
                connection.start().then(() => {
                    statusShow();
                    $(""#loading"").hide();

                    connection.invoke(""GetName"");

                }).catch((err) => {
                    console.log(err);
                    setTimeout(() => start(), 3000)
                });
            }

            statusShow();
            //Subcribes
            connection.onreconnecting(err => {
                $(""#loading"").show();
                statusShow();

            });
        ");
                WriteLiteral(@"    connection.onreconnected(connectionId => {
                $(""#loading"").hide();
                statusShow();
                console.log(""connectionId:"" + connectionId);
            });
            connection.onclose(() => {
                $(""#loading"").hide();
                statusShow();
                start();
            });

            connection.on(""ReceiveClientCount"", (clientCount) => {
                console.log(clientCount)
                $(""#clientCount"").text(clientCount);
            })

            connection.on(""Notify"", (countText) => { $(""#notify"").html(`<div class=""alert alert-success"">${countText}</div>`) })

            connection.on(""Error"", (errorText) => { alert(errorText); })

            connection.on(""ReceiveNames"", (msg) => {
                $(""#msgList"").empty();
                msg.forEach((item, index) => {
                    $(""#msgList"").append(`<li class=""list-group-item"">${item}</li>`)
                })
            })

            cons");
                WriteLiteral(@"ole.on(""ReceiveNamesByGroup"", (name, teamId) => {
                let listName;
                if (teamId == 1) {
                    listName = ""ATeamList"";
                } else {
                    listName = ""BTeamList"";
                }
                $(`#${listName}`).append(`<li class=""list-group-item"">${name}</li>`)
            });

            //clicks
            $(""#btnSave"").click(() => {
                connection.invoke(""SendName"", $(""#txtMsg"").val()).then(() => { console.log(""mesaj gönderildi""); }).catch((err) => { console.log(err); })
            });
            //on methods
            connection.on(""ReceiveMessage"", (msg) => {
                $(""#msgList"").append(`<li class=""list-group-item"">${msg}</li>`)
            });

            $(""#btnNameTeam"").click(() => {
                let name = $(""#txtName"").val();
                let teamName = $(""#input[type=radio]:checked"").val();
                connection.invoke(""SendNameByGroup"", name, teamName).catch((err) => {");
                WriteLiteral(@" console.log(err); });
            });
            $(""input[type=radio]"").change(() => {
                let value = $(""input[type=radio]:checked"").val();
                if (value == ""Team A"") {
                    connection.invoke(""AddToGroup"", value);
                    connection.invoke(""RemoveToGroup"", ""Team B"");
                } else {
                    connection.invoke(""AddToGroup"", value);
                    connection.invoke(""RemoveToGroup"", ""Team A"");
                }
            });
        });

    </script>
");
            }
            );
            WriteLiteral(@"<div class=""row"">
    <div class=""col-md-8 offset-md-2"">
        <input class=""form-control"" type=""text"" id=""txtName"" />
        <hr />
        <button class=""btn btn-primary"" id=""btnSave"">Gönder</button>
        <button class=""btn btn-warning"" id=""btnNameTeam"">İsim Ekle(Takım)</button>
        <div class=""alert alert-info mt-2"">
            <div class=""float-left"">
                Bağlantı Durumu: <strong id=""conStatus""></strong>, Client Sayısı: <strong id=""clientCount""></strong>
            </div>
            <div class=""float-right"">
                <div id=""loading"" class=""spinner-border"" role=""status"">
                    <span class=""visually-hidden""></span>
                </div>
            </div>
            <div class=""clearfix""></div>
        </div>
        <div id=""notify""></div>
    </div>


</div>
<div class=""row"">

    <div class=""col-md-8 offset-md-2"">
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""tea");
            WriteLiteral(@"mGroup"" value=""Team A"" />
            <label class=""form-check-label"">A Takımı</label>
        </div>
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""teamGroup"" value=""Team B"" />
            <label class=""form-check-label"">B Takımı</label>
        </div>
    </div>
    <div class=""col-md-8 offset-2"">
        <div class=""row"">
            <div class=""col-md-6"">
                <ul class=""list-group"" id=""ATeamList""></ul>
            </div>
            <div class=""col-md-6"">
                <ul class=""list-group"" id=""BTeamList""></ul>
            </div>
        </div>
    </div>
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
